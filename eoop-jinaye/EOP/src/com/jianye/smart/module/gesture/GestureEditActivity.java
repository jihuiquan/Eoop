package com.jianye.smart.module.gesture;import android.app.Activity;import android.app.NotificationManager;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.view.View.OnClickListener;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.movit.platform.common.constants.CommConstants;import com.movit.platform.framework.utils.SharedPreUtils;import com.movit.platform.framework.utils.StringUtils;import com.jianye.smart.R;import com.jianye.smart.application.EOPApplication;import com.jianye.smart.view.gesture.GestureContentView;import com.jianye.smart.view.gesture.GestureDrawline.GestureCallBack;import com.jianye.smart.view.gesture.LockIndicator;import com.tencent.android.tpush.XGPushManager;/** * 手势密码设置界面 */public class GestureEditActivity extends Activity {    /**     * 手机号码     */    public static final String PARAM_PHONE_NUMBER = "PARAM_PHONE_NUMBER";    /**     * 意图     */    public static final String PARAM_INTENT_CODE = "PARAM_INTENT_CODE";    /**     * 首次提示绘制手势密码，可以选择跳过     */    public static final String PARAM_IS_FIRST_ADVICE = "PARAM_IS_FIRST_ADVICE";    private ImageView back;    private TextView topRight, title, mTextTip;    private RelativeLayout topLayout;    private LockIndicator mLockIndicator;    private FrameLayout mGestureContainer;    private GestureContentView mGestureContentView;    private String mParamSetUpcode = null;    private String mParamPhoneNumber;    private boolean mIsFirstInput = true;    private String mFirstPassword = null;    private String mConfirmPassword = null;    private int mParamIntentCode;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_gesture_edit);        setUpViews();    }    @Override    protected void onResume() {        super.onResume();        if (!CommConstants.IS_RUNNING) {            EOPApplication.restartApp(getApplicationContext());            return;        }        try {            NotificationManager notiManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);            notiManager.cancelAll();            if (CommConstants.isLogin) {                if (!CommConstants.isServiceRunning) {                    // 判断跳转手势密码                    SharedPreUtils spUtil = new SharedPreUtils(this);                    String code = spUtil.getString("GestureCode");                    long time = spUtil.getLong("currentTime");                    if (StringUtils.notEmpty(code) && (System.currentTimeMillis() - time > 1000 * 5) && !CommConstants.isGestureOK) {                        startActivity(new Intent(this, GestureVerifyActivity.class).putExtra("type", GestureVerifyActivity.GestureTypeVerify));                    }                }            }            XGPushManager.onActivityStarted(this);// 某些手机进去之后会跳到登陆界面        } catch (Exception e) {            e.printStackTrace();        }    }    private void setUpViews() {        topLayout = (RelativeLayout) findViewById(R.id.common_top_layout);        back = (ImageView) findViewById(R.id.common_top_img_left);        title = (TextView) findViewById(R.id.tv_common_top_title);        topRight = (TextView) findViewById(R.id.common_top_img_right);        mLockIndicator = (LockIndicator) findViewById(R.id.lock_indicator);        mTextTip = (TextView) findViewById(R.id.text_tip);        title.setText("设置手势密码");        topRight.setText("重置");        topLayout.setBackgroundColor(Color.TRANSPARENT);        mGestureContainer = (FrameLayout) findViewById(R.id.gesture_container);        back.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });        topRight.setVisibility(View.GONE);        topRight.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                mIsFirstInput = true;                updateCodeList("");                mTextTip.setTextColor(getResources().getColor(R.color.white));                mTextTip.setText(getString(R.string.setup_gesture_pattern));            }        });        // 初始化一个显示各个点的viewGroup        mGestureContentView = new GestureContentView(this, false, "",                new GestureCallBack() {                    @Override                    public void onGestureCodeInput(String inputCode) {                        if (!isInputPassValidate(inputCode) && mIsFirstInput) {                            mTextTip.setTextColor(getResources().getColor(                                    R.color.gesture_line_error));                            mTextTip.setText(getString(R.string.setup_gesture_pattern_4_limit));                            mGestureContentView.clearDrawlineState(0L);                            return;                        }                        if (mIsFirstInput) {                            mFirstPassword = inputCode;                            updateCodeList(inputCode);                            mGestureContentView.clearDrawlineState(0L);                            mTextTip.setTextColor(getResources().getColor(                                    R.color.white));                            mTextTip.setText(getString(R.string.setup_gesture_pattern_again));                        } else {                            if (inputCode.equals(mFirstPassword)) {                                mTextTip.setVisibility(View.INVISIBLE);                                Toast.makeText(GestureEditActivity.this,                                        "设置成功", Toast.LENGTH_SHORT).show();                                mGestureContentView.clearDrawlineState(0L);                                SharedPreUtils spUtil = new SharedPreUtils(                                        GestureEditActivity.this);                                spUtil.setString("GestureCode", mFirstPassword);                                spUtil.setString(CommConstants.PASSWORD,                                        CommConstants.loginConfig                                                .getPassword());                                CommConstants.isGestureOK = true;                                GestureEditActivity.this.finish();                            } else {                                mTextTip.setTextColor(getResources().getColor(R.color.gesture_line_error));                                mTextTip.setText(getString(R.string.setup_gesture_pattern_again_error));                                // 左右移动动画                                Animation shakeAnimation = AnimationUtils                                        .loadAnimation(GestureEditActivity.this, R.anim.shake);                                mTextTip.startAnimation(shakeAnimation);                                // 保持绘制的线，1.5秒后清除                                mGestureContentView.clearDrawlineState(1300L);                                topRight.setVisibility(View.VISIBLE);                            }                        }                        mIsFirstInput = false;                    }                    @Override                    public void checkedSuccess() {                    }                    @Override                    public void checkedFail() {                    }                });        // 设置手势解锁显示到哪个布局里面        mGestureContentView.setParentView(mGestureContainer);        updateCodeList("");    }    private void updateCodeList(String inputCode) {        // 更新选择的图案        mLockIndicator.setPath(inputCode);    }    private boolean isInputPassValidate(String inputPassword) {        if (TextUtils.isEmpty(inputPassword) || inputPassword.length() < 4) {            return false;        }        return true;    }}