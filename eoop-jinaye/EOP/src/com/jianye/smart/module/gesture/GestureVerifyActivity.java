package com.jianye.smart.module.gesture;import android.app.Activity;import android.app.NotificationManager;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.view.View.OnClickListener;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.movit.platform.common.constants.CommConstants;import com.movit.platform.common.entities.LoginInfo;import com.movit.platform.common.helper.CommonHelper;import com.movit.platform.framework.utils.SharedPreUtils;import com.movit.platform.framework.utils.StringUtils;import com.movit.platform.framework.view.CusDialog;import com.movit.platform.im.helper.ServiceHelper;import com.jianye.smart.R;import com.jianye.smart.application.EOPApplication;import com.jianye.smart.activity.LoginActivity;import com.jianye.smart.view.gesture.GestureContentView;import com.jianye.smart.view.gesture.GestureDrawline.GestureCallBack;import com.tencent.android.tpush.XGPushManager;/** * 手势绘制/校验界面 */public class GestureVerifyActivity extends Activity implements        android.view.View.OnClickListener {    /**     * 手机号码     */    public static final String PARAM_PHONE_NUMBER = "PARAM_PHONE_NUMBER";    /**     * 意图     */    public static final String PARAM_INTENT_CODE = "PARAM_INTENT_CODE";    private ImageView back;    private TextView topRight;    private TextView title;    private RelativeLayout topLayout;    private TextView mTextLogo;    private TextView mTextSmallLogo;    private TextView mTextTip;    private FrameLayout mGestureContainer;    private GestureContentView mGestureContentView;    private LinearLayout gestureOptionLayout;    private TextView mTextForget;    private TextView mTextModify;    private String mParamPhoneNumber;    private long mExitTime = 0;    private int mParamIntentCode;    int count = 4;    String type;    boolean isShow = false;    public static String GestureTypeModify = "modify";    public static String GestureTypeVerify = "verify";    public static String GestureTypeClose = "close";    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_gesture_verify);        type = getIntent().getStringExtra("type");        isShow = getIntent().getBooleanExtra("isShow", false);        setUpViews();        setUpListeners();    }    private void setUpViews() {        topLayout = (RelativeLayout) findViewById(R.id.common_top_layout);        back = (ImageView) findViewById(R.id.common_top_img_left);        title = (TextView) findViewById(R.id.tv_common_top_title);        topRight = (TextView) findViewById(R.id.common_top_img_right);        mTextLogo = (TextView) findViewById(R.id.gesture_tip_logo);        mTextSmallLogo = (TextView) findViewById(R.id.gesture_tip_small_logo);        mTextTip = (TextView) findViewById(R.id.text_tip);        mGestureContainer = (FrameLayout) findViewById(R.id.gesture_container);        gestureOptionLayout = (LinearLayout) findViewById(R.id.text_gesture_option_layout);        mTextForget = (TextView) findViewById(R.id.text_forget_gesture);        mTextModify = (TextView) findViewById(R.id.text_modify_gesture);        topRight.setVisibility(View.GONE);        topLayout.setBackgroundColor(Color.TRANSPARENT);        if (type.equals(GestureTypeModify)) {            title.setText("修改手势密码");            topLayout.setVisibility(View.VISIBLE);            mTextTip.setVisibility(View.VISIBLE);            mTextTip.setText(getString(R.string.setup_input_old_gesture_code));            gestureOptionLayout.setVisibility(View.GONE);            mTextLogo.setVisibility(View.GONE);            mTextSmallLogo.setVisibility(View.INVISIBLE);        } else if (type.equals(GestureTypeVerify)) {            topLayout.setVisibility(View.INVISIBLE);            mTextTip.setVisibility(View.VISIBLE);            gestureOptionLayout.setVisibility(View.VISIBLE);        } else if (type.equals(GestureTypeClose)) {            title.setText("验证手势密码");            topLayout.setVisibility(View.VISIBLE);            mTextTip.setVisibility(View.VISIBLE);            mTextTip.setText(getString(R.string.setup_input_old_gesture_code));            gestureOptionLayout.setVisibility(View.GONE);            mTextLogo.setVisibility(View.GONE);            mTextSmallLogo.setVisibility(View.INVISIBLE);        }        back.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                // TODO Auto-generated method stub                onBackPressed();            }        });    }    @Override    protected void onResume() {        super.onResume();        if (!CommConstants.IS_RUNNING) {            EOPApplication.restartApp(getApplicationContext());            return;        }        // verify modify close        try {            NotificationManager notiManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);            notiManager.cancelAll();            if (CommConstants.isLogin) {                if (!CommConstants.isServiceRunning) {                    // 判断跳转手势密码                    SharedPreUtils spUtil = new SharedPreUtils(                            this);                    String code = spUtil.getString("GestureCode");                    long time = spUtil.getLong("currentTime");                    if (StringUtils.notEmpty(code)                            && (System.currentTimeMillis() - time > 1000 * 5)                            && !CommConstants.isGestureOK) {                        if (!GestureTypeVerify.equals(type)) {                            if (!isShow) {                                startActivity(new Intent(this,                                        GestureVerifyActivity.class).putExtra(                                        "type", GestureTypeVerify).putExtra(                                        "isShow", true));                            }                        }                    }                }            }            XGPushManager.onActivityStarted(this);// 某些手机进去之后会跳到登陆界面        } catch (Exception e) {            e.printStackTrace();        }        if (CommConstants.isGestureOK) {            count = 4;        }        mGestureContainer.removeAllViews();        SharedPreUtils spUtil = new SharedPreUtils(                GestureVerifyActivity.this);        String code = spUtil.getString("GestureCode");        // 初始化一个显示各个点的viewGroup        mGestureContentView = new GestureContentView(this, true, code,                new GestureCallBack() {                    @Override                    public void onGestureCodeInput(String inputCode) {                    }                    @Override                    public void checkedSuccess() {                        mGestureContentView.clearDrawlineState(0L);                        CommConstants.isGestureOK = true;                        GestureVerifyActivity.this.finish();                        if (type.equals(GestureTypeModify)) {                            startActivity(new Intent(                                    GestureVerifyActivity.this,                                    GestureEditActivity.class));                        } else if (type.equals(GestureTypeClose)) {                            SharedPreUtils spUtil = new SharedPreUtils(                                    GestureVerifyActivity.this);                            spUtil.setString("GestureCode", "");                            CommConstants.isGestureOK = false;                        }                    }                    @Override                    public void checkedFail() {                        if (count == 0) {                            SharedPreUtils spUtil = new SharedPreUtils(                                    GestureVerifyActivity.this);                            spUtil.setString("GestureCode", "");                            showDialog("手势密码已失效，需要使用账号&密码登陆");                            return;                        }                        mGestureContentView.clearDrawlineState(1300L);                        mTextTip.setVisibility(View.VISIBLE);                        mTextTip.setTextColor(getResources().getColor(                                R.color.gesture_line_error));                        mTextTip.setText(getString(                                R.string.gesture_error_count, count));                        // 左右移动动画                        Animation shakeAnimation = AnimationUtils                                .loadAnimation(GestureVerifyActivity.this,                                        R.anim.shake);                        mTextTip.startAnimation(shakeAnimation);                        count--;                    }                });        // 设置手势解锁显示到哪个布局里面        mGestureContentView.setParentView(mGestureContainer);    }    @Override    public void onBackPressed() {        if (!GestureTypeVerify.equals(type)) {            super.onBackPressed();        }    }    private void setUpListeners() {        mTextForget.setOnClickListener(this);        mTextModify.setOnClickListener(this);    }    private String getProtectedMobile(String phoneNumber) {        if (TextUtils.isEmpty(phoneNumber) || phoneNumber.length() < 11) {            return "";        }        StringBuilder builder = new StringBuilder();        builder.append(phoneNumber.subSequence(0, 3));        builder.append("****");        builder.append(phoneNumber.subSequence(7, 11));        return builder.toString();    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.text_modify_gesture:                // 修改                startActivity(new Intent(GestureVerifyActivity.this,                        GestureVerifyActivity.class).putExtra("type",                        GestureTypeModify).putExtra("isShow", true));                break;            case R.id.text_forget_gesture:                SharedPreUtils spUtil = new SharedPreUtils(GestureVerifyActivity.this);                spUtil.setString("GestureCode", "");                showDialog("忘记手势密码，需要使用账号&密码登陆");                break;            default:                break;        }    }    CusDialog dialogUtil;    public void showDialog(String title) {        dialogUtil = CusDialog.getInstance();        dialogUtil.showCustomDialog(GestureVerifyActivity.this);        dialogUtil.setSimpleDialog(title);        dialogUtil.setConfirmClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                CommonHelper tools = new CommonHelper(GestureVerifyActivity.this);                SharedPreUtils spUtil = new SharedPreUtils(GestureVerifyActivity.this);                ServiceHelper serviceHelper = new ServiceHelper(GestureVerifyActivity.this);                serviceHelper.stopService();                LoginInfo loginConfig = CommConstants.loginConfig;                tools.saveLoginConfig(loginConfig);                spUtil.setBoolean(CommConstants.IS_AUTOLOGIN, false);                spUtil.setBoolean(CommConstants.IS_REMEMBER, false);                spUtil.setString(CommConstants.PASSWORD, "");                EOPApplication.exit();                GestureVerifyActivity.this.finish();                Intent intent = new Intent(GestureVerifyActivity.this,LoginActivity.class);                startActivity(intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)                        .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP).setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP));                dialogUtil.dismiss();            }        });    }}