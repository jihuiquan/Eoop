package com.jianye.smart.module.workbench.adapter;import java.util.List;import java.util.Map;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseExpandableListAdapter;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.ImageView;import android.widget.TextView;import com.androidquery.AQuery;import com.androidquery.callback.BitmapAjaxCallback;import com.movit.platform.common.constants.CommConstants;import com.movit.platform.framework.utils.SharedPreUtils;import com.jianye.smart.R;import com.jianye.smart.module.workbench.model.WorkTable;import com.jianye.smart.view.widget.SwitchButton;public class ExpandableForWorkTableAdapter extends BaseExpandableListAdapter {	// 存放父列表数据	List<Map<String, Object>> groupData;	// 放子列表列表数据	List<List<Map<String, Object>>> childData;	Context mContext;	SharedPreUtils spUtil;	AQuery aq;	public ExpandableForWorkTableAdapter(List<Map<String, Object>> groupData,			List<List<Map<String, Object>>> childData, Context mContext) {		this.groupData = groupData;		this.childData = childData;		this.mContext = mContext;		spUtil = new SharedPreUtils(mContext);		aq = new AQuery(mContext);	}	// **************************************	public long getChildId(int groupPosition, int childPosition) {		return childPosition;	}	public long getGroupId(int groupPosition) {		return groupPosition;	}	public int getChildrenCount(int groupPosition) {		return childData.get(groupPosition).size();	}	public int getGroupCount() {		return groupData.size();	}	public Object getChild(int groupPosition, int childPosition) {		return childData.get(groupPosition).get(childPosition).get("worktable");	}	public Object getGroup(int groupPosition) {		return groupData.get(groupPosition).get("status").toString();	}	public View getChildView(final int groupPosition, final int childPosition,			boolean isLastChild, View convertView, ViewGroup parent) {		ViewHolderChild holderChild;		if (convertView == null				|| convertView.getTag(R.id.item_child_avatar						+ getTagForPostion(groupPosition, childPosition)) == null) {			holderChild = new ViewHolderChild();			LayoutInflater inflater = (LayoutInflater) mContext					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);			convertView = inflater.inflate(					R.layout.work_table_expandlist_child_item, null);			holderChild.icon = (ImageView) convertView					.findViewById(R.id.item_child_avatar);			holderChild.name = (TextView) convertView					.findViewById(R.id.item_child_value);			holderChild.switchButton = (SwitchButton) convertView					.findViewById(R.id.item_child_switch);			convertView.setTag(					R.id.item_child_avatar							+ getTagForPostion(groupPosition, childPosition),					holderChild);		} else {			holderChild = (ViewHolderChild) convertView					.getTag(R.id.item_child_avatar							+ getTagForPostion(groupPosition, childPosition));		}		AQuery aQuery = aq.recycle(convertView);		final WorkTable workTable = (WorkTable) getChild(groupPosition,				childPosition);		String dispaly = workTable.getDisplay();		if ("show".equals(dispaly)) {			holderChild.switchButton.setChecked(true);		} else if ("hide".equals(dispaly)) {			holderChild.switchButton.setChecked(false);		}		BitmapAjaxCallback callback = new BitmapAjaxCallback();//		{//			@Override//			protected void callback(String url, ImageView iv, Bitmap bm,//					AjaxStatus status) {//				// TODO Auto-generated method stub//				if ("unavailable".equals(workTable.getStatus())) {//					try {//						Bitmap gray = PicUtils.bitmap2Gray(bm);//						iv.setImageBitmap(gray);//					} catch (Exception e) {//						// TODO Auto-generated catch block//						e.printStackTrace();//					}//				} else {//					super.callback(url, iv, bm, status);//				}//			}//		};		callback.animation(AQuery.FADE_IN_NETWORK);		aQuery.id(holderChild.icon).image(				CommConstants.URL_DOWN + workTable.getPicture(), true, true, 0,				R.drawable.icon, callback);		holderChild.name.setText(workTable.getName());		holderChild.switchButton				.setOnCheckedChangeListener(new OnCheckedChangeListener() {					@Override					public void onCheckedChanged(CompoundButton buttonView,							boolean isChecked) {						// TODO Auto-generated method stub						if (isChecked) {							workTable.setDisplay("show");						} else {							workTable.setDisplay("hide");						}						notifyDataSetChanged();					}				});		return convertView;	}	public int getTagForPostion(int groupPos, int childPos) {		String string = groupPos + "" + childPos;		return Integer.parseInt(string);	}	public View getGroupView(int groupPosition, boolean isExpanded,			View convertView, ViewGroup parent) {		ViewHolder holder;		if (convertView == null				|| convertView.getTag(R.id.item_group_value + groupPosition) == null) {			holder = new ViewHolder();			LayoutInflater inflaterGroup = (LayoutInflater) mContext					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);			convertView = inflaterGroup.inflate(					R.layout.work_table_expandlist_group_item, null);			holder.group = (TextView) convertView					.findViewById(R.id.item_group_value);			convertView.setTag(R.id.item_group_value + groupPosition, holder);		} else {			holder = (ViewHolder) convertView.getTag(R.id.item_group_value					+ groupPosition);		}		holder.group.setText(getGroup(groupPosition).toString());		return convertView;	}	private static class ViewHolder {		TextView group;	}	private static class ViewHolderChild {		ImageView icon;		TextView name;		SwitchButton switchButton;	}	public boolean hasStableIds() {		return true;	}	public boolean isChildSelectable(int groupPosition, int childPosition) {		return true;	}}