package com.jianye.smart.module.workbench.adapter;import android.content.Context;import android.graphics.Bitmap;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.androidquery.AQuery;import com.androidquery.callback.AjaxStatus;import com.androidquery.callback.BitmapAjaxCallback;import com.movit.platform.common.constants.CommConstants;import com.movit.platform.framework.utils.PicUtils;import com.movit.platform.framework.utils.SharedPreUtils;import com.jianye.smart.R;import com.jianye.smart.module.workbench.model.WorkTable;import java.util.HashMap;import java.util.List;import java.util.Map;public class WorkTableGridAdapter extends BaseAdapter {  private Context context;  private Map<String, Integer> unReadMap = new HashMap<>();  private LayoutInflater mInflater;  private List<WorkTable> mData;  private SharedPreUtils spUtil;  private AQuery aq;  public WorkTableGridAdapter(Context context, List<WorkTable> mData) {    super();    this.context = context;    this.mData = mData;    this.mInflater = LayoutInflater.from(context);    spUtil = new SharedPreUtils(context);    aq = new AQuery(context);  }  @Override  public int getCount() {    return mData.size();  }  @Override  public Object getItem(int arg0) {    return mData.get(arg0);  }  @Override  public long getItemId(int arg0) {    return arg0;  }  @Override  public View getView(final int postion, View converView, ViewGroup arg2) {    ViewHolder holder = null;    if (converView == null        || converView.getTag(R.layout.work_table_gridview_item + postion) == null) {      holder = new ViewHolder();      converView = mInflater.inflate(R.layout.work_table_gridview_item, arg2, false);      holder.name = (TextView) converView.findViewById(R.id.gridview_item_name);      holder.photo = (ImageView) converView.findViewById(R.id.gridview_item_img);      holder.delImg = (ImageView) converView.findViewById(R.id.gridview_item_delImg);      holder.grid_rl = (RelativeLayout) converView.findViewById(R.id.grid_rl);      holder.more = (ImageView) converView.findViewById(R.id.gridview_item_more_img);      converView.setTag(R.layout.work_table_gridview_item + postion, holder);    } else {      holder = (ViewHolder) converView.getTag(R.layout.work_table_gridview_item + postion);    }    AQuery aQuery = aq.recycle(converView);    final WorkTable workTable = (WorkTable) getItem(postion);    if (postion == getCount() - 1) {// 最后一个      holder.name.setVisibility(View.INVISIBLE);      holder.photo.setVisibility(View.INVISIBLE);    } else {      holder.more.setVisibility(View.INVISIBLE);      holder.name.setText(workTable.getName());      BitmapAjaxCallback callback = new BitmapAjaxCallback() {        @Override        protected void callback(String url, ImageView iv, Bitmap bm, AjaxStatus status) {          if ("unavailable".equals(workTable.getStatus())) {            try {              Bitmap gray = PicUtils.bitmap2Gray(bm);              iv.setImageBitmap(gray);            } catch (Exception e) {              e.printStackTrace();            }          } else {            super.callback(url, iv, bm, status);          }        }      };      callback.animation(AQuery.FADE_IN_NETWORK);      aQuery.id(holder.photo).image(CommConstants.URL_DOWN + workTable.getPicture(), true, true, 0,          R.drawable.icon, callback);    }    return converView;  }  public void setUnread(Map<String, Integer> unReadMap) {    this.unReadMap = unReadMap;  }  public final class ViewHolder {    public RelativeLayout grid_rl;    public ImageView photo;    public ImageView more;    public TextView name;    public ImageView delImg;    int postion;  }}