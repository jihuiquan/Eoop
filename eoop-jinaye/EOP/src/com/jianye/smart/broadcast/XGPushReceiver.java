package com.jianye.smart.broadcast;import android.app.ActivityManager;import android.app.NotificationManager;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.text.TextUtils;import android.util.Log;import com.movit.platform.common.constants.CommConstants;import com.movit.platform.common.module.badge.BadgeUtils;import com.movit.platform.im.manager.XmppManager;import com.jianye.smart.activity.MainActivity;import com.jianye.smart.activity.SplashActivity;import com.jianye.smart.application.EOPApplication;import com.tencent.android.tpush.XGLocalMessage;import com.tencent.android.tpush.XGPushBaseReceiver;import com.tencent.android.tpush.XGPushClickedResult;import com.tencent.android.tpush.XGPushManager;import com.tencent.android.tpush.XGPushRegisterResult;import com.tencent.android.tpush.XGPushShowedResult;import com.tencent.android.tpush.XGPushTextMessage;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.List;public class XGPushReceiver extends XGPushBaseReceiver {    public static final String MAIN_ACTIVITY = "action.intent.push.in";    public static final String DIARY_REPORT_ACTIVITY = "action.intent.push.diaryReport";    private static final String LogTag = "XGPushReceiver";    // 通知展示    @Override    public void onNotifactionShowedResult(Context context, XGPushShowedResult notifiShowedRlt) {        if (context == null || notifiShowedRlt == null) {            return;        }        // 获取自定义key-value        String customContent = notifiShowedRlt.getCustomContent();        Log.d(LogTag, "onNotifactionShowedResult:" + customContent);        if (customContent != null && customContent.length() != 0) {            try {                JSONObject obj = new JSONObject(customContent);                // key1为前台配置的key                if (!obj.isNull("key")) {                    String value = obj.getString("key");                    Log.d(LogTag, "key:" + value);                }                if (!obj.isNull("unreadSize")) {                    String value = obj.getString("unreadSize");                    Log.d(LogTag, "unreadSize:" + value);                    //APP图标数字提醒                    BadgeUtils.setBadgeNum(context, MainActivity.class, true, "" + value, true);                }            } catch (JSONException e) {                e.printStackTrace();            }        }        // XGNotification notific = new XGNotification();        // notific.setMsg_id(notifiShowedRlt.getMsgId());        // notific.setTitle(notifiShowedRlt.getTitle());        // notific.setContent(notifiShowedRlt.getContent());        // // notificationActionType==1为Activity，2为url，3为intent        // notific.setNotificationActionType(notifiShowedRlt.getNotificationActionType());        // // Activity,url,intent都可以通过getActivity()获得        // notific.setActivity(notifiShowedRlt.getActivity());        // notific.setUpdate_time(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime()));        // NotificationService.getInstance(context).save(notific);        // context.sendBroadcast(intent);    }    @Override    public void onUnregisterResult(Context context, int errorCode) {        if (context == null) {            return;        }        String text = "";        if (errorCode == XGPushBaseReceiver.SUCCESS) {            text = "反注册成功";        } else {            text = "反注册失败" + errorCode;        }        Log.d(LogTag, text);    }    @Override    public void onSetTagResult(Context context, int errorCode, String tagName) {        if (context == null) {            return;        }        String text = "";        if (errorCode == XGPushBaseReceiver.SUCCESS) {            text = "\"" + tagName + "\"设置成功";        } else {            text = "\"" + tagName + "\"设置失败,错误码：" + errorCode;        }        Log.d(LogTag, text);    }    @Override    public void onDeleteTagResult(Context context, int errorCode, String tagName) {        if (context == null) {            return;        }        String text = "";        if (errorCode == XGPushBaseReceiver.SUCCESS) {            text = "\"" + tagName + "\"删除成功";        } else {            text = "\"" + tagName + "\"删除失败,错误码：" + errorCode;        }        Log.d(LogTag, text);    }    // 通知点击回调 actionType=1为该消息被清除，actionType=0为该消息被点击    @Override    public void onNotifactionClickedResult(Context context,                                           XGPushClickedResult message) {        if (context == null || message == null) {            return;        }        String text = "";        if (message.getActionType() == XGPushClickedResult.NOTIFACTION_CLICKED_TYPE) {            NotificationManager notiManager = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);            notiManager.cancelAll();            text = message.getCustomContent();            try {                JSONObject object = new JSONObject(text);                String s = object.optString("target");                if (!TextUtils.isEmpty(s) && s.equals("地产报表")) {                    gotoTargetActivity(context,DIARY_REPORT_ACTIVITY);                } else {                    gotoTargetActivity(context,MAIN_ACTIVITY);                }            } catch (JSONException e) {                gotoTargetActivity(context,MAIN_ACTIVITY);            }        } else if (message.getActionType() == XGPushClickedResult.NOTIFACTION_DELETED_TYPE) {            // 通知被清除啦。。。。            // APP自己处理通知被清除后的相关动作            text = "通知被清除 :" + message;        }        // 获取自定义key-value        String customContent = message.getCustomContent();        if (customContent != null && customContent.length() != 0) {            try {                JSONObject obj = new JSONObject(customContent);                // key1为前台配置的key                if (!obj.isNull("key")) {                    String value = obj.getString("key");                    Log.d(LogTag, "postWithoutEncrypt custom value:" + value);                }            } catch (JSONException e) {                e.printStackTrace();            }        }        // APP自主处理的过程。。。        Log.d(LogTag, text);    }    private void gotoTargetActivity(Context context, String intentAction) {//        try {//            if (CommConstants.allUserInfos != null && CommConstants.allOrgunits != null && CommConstants.isLogin) {//                CommConstants.isServiceRunning = false;//                Intent intent = new Intent(intentAction);//                intent.setClass(context.getApplicationContext(), MainActivity.class);//                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                context.getApplicationContext().startActivity(intent);//            } else {//                EOPApplication.exit();//                Intent notificationIntent = new Intent(context, SplashActivity.class);//                notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);//                context.startActivity(notificationIntent);//            }//        } catch (Exception e) {//            e.printStackTrace();//        }        if (isAppForground(context) && !CommConstants.isExit) {        } else {            EOPApplication.exit();            Intent notificationIntent = new Intent(context, SplashActivity.class);            notificationIntent.putExtra("type",MAIN_ACTIVITY);            notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            context.startActivity(notificationIntent);            Log.d("XGPushReceiver","onNotifactionClicked---->SplashActivity");        }    }    public static boolean isAppForground(Context mContext) {        ActivityManager am = (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningTaskInfo> tasks = am.getRunningTasks(1);        if (!tasks.isEmpty()) {            ComponentName topActivity = tasks.get(0).topActivity;            if (!topActivity.getPackageName().equals(mContext.getPackageName())) {                return false;            }        }        return true;    }    @Override    public void onRegisterResult(Context context, int errorCode, XGPushRegisterResult message) {        if (context == null || message == null) {            return;        }        String text = "";        if (errorCode == XGPushBaseReceiver.SUCCESS) {            text = message + "注册成功";            // 在这里拿token            String token = message.getToken();            Log.d(LogTag, "token=" + token);        } else {            text = message + "注册失败，错误码：" + errorCode;        }        Log.d(LogTag, text);    }    // 消息透传    @Override    public void onTextMessage(Context context, XGPushTextMessage message) {        String text = "收到消息:" + message.toString();        // 获取自定义key-value        String customContent = message.getCustomContent();        if (customContent != null && customContent.length() != 0) {            try {                JSONObject obj = new JSONObject(customContent);                // key1为前台配置的key                if (!obj.isNull("key")) {                    String value = obj.getString("key");                    Log.d(LogTag, "postWithoutEncrypt custom key:" + value);                }                if (!obj.isNull("unreadSize")) {                    String value = obj.getString("unreadSize");                    Log.d(LogTag, "postWithoutEncrypt custom unreadSize:" + value);                    //APP图标数字提醒                    BadgeUtils.setBadgeNum(context, MainActivity.class, true, "" + value, true);                }                if(!XmppManager.getInstance().isConnected()){                    HashMap<String,String> messageMap = new HashMap<>();                    messageMap.put("target",obj.getString("target"));                    XGLocalMessage localMessage = new XGLocalMessage();                    localMessage.setTitle(message.getTitle());                    localMessage.setContent(message.getContent());                    localMessage.setCustomContent(messageMap);                    XGPushManager.addLocalNotification(context,localMessage);                }            } catch (JSONException e) {                e.printStackTrace();            }        }        // APP自主处理消息的过程...        Log.d(LogTag, text);    }}