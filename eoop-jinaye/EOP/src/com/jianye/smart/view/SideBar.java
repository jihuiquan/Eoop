package com.jianye.smart.view;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.ColorDrawable;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import android.widget.ExpandableListView;import android.widget.ListView;import android.widget.SectionIndexer;import android.widget.TextView;import com.jianye.smart.R;public class SideBar extends View {	private char[] l;	private SectionIndexer sectionIndexter = null;	private ListView list;	private ExpandableListView exlist;//	private TextView mDialogText;	Bitmap mbitmap;	private int type = 1;	int choose = -1;	OnTouchingLetterChangedListener onTouchingLetterChangedListener;	Paint paint = new Paint();	public SideBar(Context context) {		super(context);		init();	}	public SideBar(Context context, AttributeSet attrs) {		super(context, attrs);		init();	}	private void init() {		l = new char[] { '!', '★', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',				'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',				'V', 'W', 'X', 'Y', 'Z' };		mbitmap = BitmapFactory.decodeResource(getResources(),				R.drawable.scroll_bar_search_icon);	}	public SideBar(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		init();	}	public void setListView(SectionIndexer sec, ExpandableListView listView) {		exlist = listView;		sectionIndexter = sec;	}	public void setTextView(TextView mDialogText) {//		this.mDialogText = mDialogText;	}	public boolean onTouchEvent(MotionEvent event) {		super.onTouchEvent(event);		int i = (int) event.getY();		int idx = i / (getMeasuredHeight() / l.length);		if (idx >= l.length) {			idx = l.length - 1;		} else if (idx < 0) {			idx = 0;		}		if (event.getAction() == MotionEvent.ACTION_DOWN				|| event.getAction() == MotionEvent.ACTION_MOVE) {			setBackgroundResource(R.drawable.scrollbar_bg);//			mDialogText.setVisibility(View.VISIBLE);//			if (idx == 0) {//				mDialogText.setText("搜索");//				mDialogText.setTextSize(25);//			}else if (idx == 1) {//				mDialogText.setText("★");//				mDialogText.setTextSize(25);//			} else {//				mDialogText.setText(String.valueOf(l[idx]));//				mDialogText.setTextSize(34);//			}			if (sectionIndexter == null) {				if (null != list && null != list.getAdapter()) {					sectionIndexter = (SectionIndexer) list.getAdapter();				} else if (null != exlist && null != exlist.getAdapter()) {					sectionIndexter = (SectionIndexer) exlist.getAdapter();				} else {					return true;				}			}			int position = sectionIndexter.getPositionForSection(l[idx]);			if (position == -1) {				return true;			}			choose = idx;			if (null != exlist) {				exlist.setSelectedGroup(position);			} else {				list.setSelection(position);			}		} else {//			mDialogText.setVisibility(View.INVISIBLE);		}		if (event.getAction() == MotionEvent.ACTION_UP) {			choose = -1;			setBackgroundDrawable(new ColorDrawable(0x00000000));		}		return true;	}	protected void onDraw(Canvas canvas) {		super.onDraw(canvas);		float widthCenter = getMeasuredWidth() / 2;		float height = getMeasuredHeight() / l.length;		for (int i = 0; i < l.length; i++) {			paint.setColor(getResources().getColor(R.color.sidebar_text_color));			paint.setTypeface(Typeface.DEFAULT_BOLD);			paint.setTextAlign(Paint.Align.CENTER);			paint.setAntiAlias(true);			paint.setTextSize((float) 23.0);			if (i == choose) {//				paint.setColor(Color.parseColor("#3399ff"));				paint.setFakeBoldText(true);			}			if (i == 0 && type != 2) {				// canvas.drawText(String.valueOf(l[i]), widthCenter, (i + 1)				// * height, paint);				canvas.drawBitmap(mbitmap, widthCenter - 12, (i + 1) * height						- height / 2, paint);			} else if (i == 1 && type != 2) {				canvas.drawText("★", widthCenter, (i + 1) * height, paint);			} else {				canvas.drawText(String.valueOf(l[i]), widthCenter, (i + 1)						* height, paint);			}		}	}	public void setOnTouchingLetterChangedListener(			OnTouchingLetterChangedListener onTouchingLetterChangedListener) {		this.onTouchingLetterChangedListener = onTouchingLetterChangedListener;	}	public interface OnTouchingLetterChangedListener {		public void onTouchingLetterChanged(String s);	}}